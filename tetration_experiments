Last login: Sat Feb 11 12:09:51 on console
(base) tudor@Tudors-MacBook-Air ~ % cd Workspace
(base) tudor@Tudors-MacBook-Air Workspace % git clone https://github.com/MrBlu3Sky57/Computing-Contests.git
Cloning into 'Computing-Contests'...
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (4/4), done.
(base) tudor@Tudors-MacBook-Air Workspace % 
  [Restored Mar 11, 2023 at 1:03:27 PM]
Last login: Sat Mar 11 13:03:24 on console
(base) tudor@Tudors-MacBook-Air Workspace % 
  [Restored Mar 23, 2023 at 1:27:27 PM]
Last login: Thu Mar 23 13:27:20 on console
Restored session: Thu 23 Mar 2023 13:26:40 EDT
(base) tudor@Tudors-MacBook-Air Workspace % 
  [Restored Apr 2, 2023 at 5:11:48 PM]
Last login: Sun Apr  2 17:11:45 on console
(base) tudor@Tudors-MacBook-Air Workspace % 
  [Restored Apr 9, 2023 at 9:46:26 PM]
Last login: Sun Apr  9 21:46:23 on console
(base) tudor@Tudors-MacBook-Air Workspace % python3
Python 3.10.8 (main, Nov 24 2022, 08:09:04) [Clang 14.0.6 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 0.01
>>> for x in range(50)
  File "<stdin>", line 1
    for x in range(50)
                      ^
SyntaxError: expected ':'
>>> for x in range(50):
... x = 0.01** x
  File "<stdin>", line 2
    x = 0.01** x
    ^
IndentationError: expected an indented block after 'for' statement on line 1
>>> for x in range(50):
...     x = 0.01**x
...     print(x)
... 
1.0
0.01
0.0001
1.0000000000000002e-06
1e-08
1.0000000000000002e-10
1.0000000000000002e-12
1.0000000000000002e-14
1.0000000000000002e-16
1.0000000000000003e-18
1.0000000000000002e-20
1.0000000000000003e-22
1.0000000000000003e-24
1.0000000000000003e-26
1.0000000000000003e-28
1.0000000000000003e-30
1.0000000000000003e-32
1.0000000000000004e-34
1.0000000000000004e-36
1.0000000000000004e-38
1.0000000000000003e-40
1.0000000000000005e-42
1.0000000000000005e-44
1.0000000000000004e-46
1.0000000000000004e-48
1.0000000000000005e-50
1.0000000000000006e-52
1.0000000000000006e-54
1.0000000000000006e-56
1.0000000000000006e-58
1.0000000000000007e-60
1.0000000000000007e-62
1.0000000000000006e-64
1.0000000000000006e-66
1.0000000000000007e-68
1.0000000000000008e-70
1.0000000000000007e-72
1.0000000000000007e-74
1.0000000000000008e-76
1.0000000000000008e-78
1.0000000000000009e-80
1.0000000000000008e-82
1.0000000000000008e-84
1.000000000000001e-86
1.0000000000000009e-88
1.0000000000000009e-90
1.000000000000001e-92
1.000000000000001e-94
1.000000000000001e-96
1.000000000000001e-98
>>> def tetration(x):
...     for y in range(50):
... 
  File "<stdin>", line 3
    
IndentationError: expected an indented block after 'for' statement on line 2
>>> def tetration(x):
...     k = x
...     for y in range(50)
  File "<stdin>", line 3
    for y in range(50)
                      ^
SyntaxError: expected ':'
>>> def tetration(x):
...     k = x
...     for y in range(50):
...             k = x**k 
...             print(k)
... 
>>> tetration(0.5)
0.7071067811865476
0.6125473265360659
0.6540408600420695
0.6354978458133738
0.6437186417228691
0.6400610211772397
0.6416858070429983
0.6409635371779633
0.641284509066585
0.6411418514717379
0.6412052524498624
0.6411770745288387
0.6411895977668723
0.6411840319786225
0.6411865056139605
0.6411854062407777
0.6411858948418261
0.6411856776898719
0.6411857742000348
0.6411857313074347
0.6411857503704541
0.6411857418981602
0.6411857456635535
0.6411857439900768
0.6411857447338303
0.6411857444032794
0.6411857445501881
0.6411857444848965
0.6411857445139145
0.6411857445010178
0.6411857445067496
0.6411857445042022
0.6411857445053344
0.6411857445048311
0.6411857445050548
0.6411857445049554
0.6411857445049995
0.64118574450498
0.6411857445049887
0.6411857445049848
0.6411857445049866
0.6411857445049858
0.6411857445049861
0.6411857445049859
0.641185744504986
0.641185744504986
0.641185744504986
0.641185744504986
0.641185744504986
0.641185744504986
>>> tetration(2)
4
16
65536
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in tetration
ValueError: Exceeds the limit (4300) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit
>>> import math
>>> math.e
2.718281828459045
>>> tetration(e**(1/e))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'e' is not defined
>>> tetration(math.e**(1/math.e))
1.7014206956610736
1.8699612238030825
1.9895734917765782
2.0790752101176095
2.148669957838492
2.2043914917478524
2.250045211708883
2.2881539911886515
2.3204585374295124
2.3481997952301517
2.3722869043280483
2.393401511445153
2.4120649600492436
2.4286829379472064
2.443575955585851
2.4570006473258603
2.4691649710871304
2.480239256016197
2.4903643659418035
2.499657821873783
2.5082184559626786
2.5161299926923832
2.5234638355471004
2.530281257764321
2.5366351409344112
2.5425713668465333
2.5481299407749094
2.5533459048544134
2.5582500859840747
2.562869712249826
2.5672289240972312
2.571349200664059
2.5752497172768716
2.5789476467527868
2.5824584145598446
2.5857959158832617
2.588972701078425
2.5920001347602146
2.594888532804214
2.5976472807602025
2.6002849365578715
2.6028093198853868
2.605227590217484
2.6075463151414184
2.609771530360874
2.6119087925378732
2.613963225951405
2.61593956380145
2.6178421848624485
2.6196751460863457
>>> def tetration(x):
...     k = x
...     for y in range(1000):
...             k = x**k 
...             print(k)
... 
>>> tetration(math.e ** (1 / math.e))
1.7014206956610736
1.8699612238030825
1.9895734917765782
2.0790752101176095
2.148669957838492
2.2043914917478524
2.250045211708883
2.2881539911886515
2.3204585374295124
2.3481997952301517
2.3722869043280483
2.393401511445153
2.4120649600492436
2.4286829379472064
2.443575955585851
2.4570006473258603
2.4691649710871304
2.480239256016197
2.4903643659418035
2.499657821873783
2.5082184559626786
2.5161299926923832
2.5234638355471004
2.530281257764321
2.5366351409344112
2.5425713668465333
2.5481299407749094
2.5533459048544134
2.5582500859840747
2.562869712249826
2.5672289240972312
2.571349200664059
2.5752497172768716
2.5789476467527868
2.5824584145598446
2.5857959158832617
2.588972701078425
2.5920001347602146
2.594888532804214
2.5976472807602025
2.6002849365578715
2.6028093198853868
2.605227590217484
2.6075463151414184
2.609771530360874
2.6119087925378732
2.613963225951405
2.61593956380145
2.6178421848624485
2.6196751460863457
2.6214422116683744
2.623146879015712
2.6247924019976026
2.6263818118035287
2.6279179356918942
2.629403413874181
2.6308407147475306
2.632232148661343
2.6335798803800103
2.634885940383717
2.6361522351318434
2.637380556398482
2.6385725897765355
2.6397299224355923
2.6408540502089037
2.641946384076245
2.643008256101931
2.644040924880705
2.6450455805384645
2.646023349329733
2.6469752978693353
2.6479024370318065
2.6488057255485984
2.649686073330071
2.6505443445365415
2.6513813604202454
2.6521979019579076
2.6529947122917195
2.6537724989948015
2.6545319361757063
2.6552736664351575
2.6559983026869958
2.6567064298542027
2.6573986064498962
2.658075366052301
2.6587372186819014
2.659384652088266
2.660018132953385
2.6606381080177792
2.661245005135092
2.661839234260428
2.662421188377231
2.662991244367126
2.6635497638267758
2.664097093835483
2.664633567676969
2.665159505518492
2.665675215050218
2.666180992087532
2.666677121138777
2.667163875940712
2.6676415199638073
2.6681103068893526
2.668570481060185
2.669022277906729
2.669465924349914
2.669901639182416
2.6703296334295774
2.670750110691254
2.6711632674657584
2.6715692934569844
2.671968371865718
2.672360679666085
2.6727463878680084
2.673125661766493
2.6734986611785065
2.6738655406681717
2.674226449760932
2.674581533147322
2.674930930876924
2.675274778543054
2.675613207458701
2.6759463448241867
2.6762743138870047
2.676597234094259
2.676915221238102
2.677228387594536
2.677536842055938
2.677840690257634
2.678140034698829
2.678434974858188
2.678725607304339
2.6790120258015597
2.679294321410891
2.6795725825869012
2.6798468952703263
2.680117342976781
2.680384006881741
2.680646965901976
2.680906296773601
2.681162074126914
2.681414370558172
2.6816632566984495
2.681908801279718
2.6821510711982754
2.682390131575648
2.6826260458170856
2.6828588756677565
2.6830886812667467
2.683315521198965
2.683539452545049
2.6837605309293564
2.683978810566133
2.6841943443039344
2.684407183668376
2.6846173789032886
2.684824979010348
2.685030031787238
2.685232583864421
2.685432680740563
2.6856303668166794
2.68582568542905
2.6860186788809557
2.68620938847329
2.686397854534082
2.686584116446988
2.6867682126787824
2.6869501808058964
2.6871300575400396
2.68730787875294
2.687483679500241
2.6876574940445854
2.6878293558779225
2.6879992977430622
2.6881673516545144
2.688333548918632
2.688497920153091
2.6886604953057307
2.6888213036727797
2.6889803739164866
2.6891377340821845
2.6892934116148055
2.6894474333748675
2.6895998256539526
2.6897506141896974
2.68989982418031
2.6900474802986327
2.690193606705769
2.6903382270642857
2.6904813645510104
2.6906230418694355
2.690763281261745
2.6909021045204753
2.6910395329998242
2.691175587626621
2.6913102889109677
2.691443656956564
2.6915757114707266
2.691706471774115
2.6918359568101695
2.6919641851542773
2.6920911750226684
2.692216944281059
2.692341510453043
2.6924648907282465
2.692587101970248
2.6927081607242735
2.692828083224678
2.6929468854022125
2.693064582891093
2.693181191035868
2.6932967248981
2.6934111992628593
2.693524628645043
2.6936370272955203
2.693748409207108
2.69385878812039
2.6939681775293747
2.6940765906870037
2.694184040610513
2.694290540086651
2.694396101676759
2.6945007377217167
2.6946044603467616
2.694707281466177
2.6948092127878636
2.694910265817788
2.695010451864321
2.695109782042461
2.6952082672779514
2.6953059183112926
2.695402745701653
2.6954987598306794
2.695593970906214
2.695688388965918
2.695782023880802
2.695874885358675
2.695966982947501
2.6960583260386772
2.6961489238702314
2.696238785529941
2.6963279199583745
2.6964163359518643
2.6965040421654014
2.6965910471154646
2.696677359182781
2.696762986615022
2.6968479375294314
2.6969322199153978
2.697015841636959
2.6970988104352545
2.697181133930915
2.6972628196264004
2.6973438749082823
2.697424307049473
2.6975041232114028
2.6975833304461507
2.6976619356985228
2.6977399458080846
2.697817367511148
2.697894207442712
2.697970472138363
2.698046168036127
2.6981213014782868
2.698195878713153
2.6982699058968005
2.698343389094763
2.698416334283693
2.6984887473529846
2.698560634106358
2.698632000263416
2.698702851461159
2.698773193255474
2.6988430311225877
2.6989123704604885
2.6989812165903206
2.6990495747577463
2.6991174501342794
2.699184847818592
2.6992517728377923
2.6993182301486756
2.699384224638951
2.699449761128439
2.6995148443702486
2.699579479051927
2.6996436697965853
2.6997074211640033
2.6997707376517104
2.6998336236960445
2.6998960836731887
2.6999581219001887
2.7000197426359476
2.700080950082203
2.7001417483844814
2.7002021416330364
2.7002621338637676
2.700321729059119
2.7003809311489624
2.7004397440114625
2.7004981714739236
2.700556217313622
2.70061388525862
2.7006711789885656
2.700728102135476
2.700784658284505
2.700840850974699
2.700896683699732
2.7009521599086352
2.701007283006504
2.701062056355198
2.701116483274024
2.7011705670404083
2.7012243108905536
2.701277718020087
2.7013307915846934
2.7013835347007373
2.701435950445874
2.7014880418596485
2.7015398119440843
2.7015912636642603
2.701642399948877
2.7016932236908136
2.701743737747674
2.701793944942323
2.7018438480634117
2.7018934498658957
2.7019427530715423
2.701991760369428
2.7020404744164286
2.702088897837701
2.702137033227152
2.7021848831479063
2.7022324501327577
2.70227973668462
2.702326745276963
2.7023734783542483
2.7024199383323495
2.702466127598971
2.7025120485140586
2.702557703410198
2.7026030945930146
2.702648224341559
2.70269309490869
2.702737708521449
2.7027820673814307
2.7028261736651435
2.7028700295243673
2.7029136370865023
2.7029569984549155
2.703000115709277
2.703042990905894
2.7030856260780385
2.703128023236267
2.7031701843687395
2.7032121114415286
2.7032538063989264
2.7032952711637446
2.7033365076376112
2.7033775177012607
2.7034183032148213
2.7034588660180954
2.7034992079308364
2.703539330753023
2.7035792362651243
2.703618926228366
2.7036584023849883
2.7036976664585013
2.7037367201539357
2.7037755651580913
2.7038142031397787
2.7038526357500587
2.703890864622478
2.7039288913733013
2.703966717601738
2.7040043448901674
2.7040417748043604
2.7040790088936952
2.7041160486913722
2.704152895714625
2.7041895514649266
2.7042260174281947
2.704262295074992
2.7042983858607244
2.7043342912258352
2.704370012595998
2.7044055513823047
2.7044409089814514
2.7044760867759225
2.7045110861341697
2.704545908410791
2.704580554946704
2.70461502706932
2.7046493260927122
2.7046834533177835
2.704717410032431
2.704751197511709
2.7047848170179867
2.7048182698011067
2.7048515570985407
2.704884680135542
2.7049176401252946
2.7049504382690626
2.7049830757563367
2.7050155537649765
2.7050478734613543
2.705080036000493
2.7051120425262054
2.7051438941712287
2.705175592057359
2.705207137295582
2.7052385309862053
2.705269774218983
2.7053008680732455
2.705331813618021
2.70536261191216
2.7053932640044547
2.7054237709337596
2.705454133729108
2.705484353409828
2.7055144309856565
2.7055443674568527
2.705574163814308
2.7056038210396554
2.7056333401053783
2.705662721974916
2.7056919676027693
2.705721077934603
2.705750053907349
2.7057788964493064
2.7058076064802403
2.7058361849114805
2.705864632646018
2.7058929505785985
2.7059211395958185
2.7059492005762165
2.7059771343903654
2.706004941900961
2.7060326239629124
2.70606018142343
2.70608761512211
2.7061149258910207
2.7061421145547877
2.706169181930676
2.706196128828671
2.7062229560515627
2.706249664395021
2.7062762546476775
2.7063027275912024
2.7063290840003815
2.7063553246431904
2.706381450280871
2.7064074616680043
2.706433359552583
2.706459144676083
2.7064848177735352
2.7065103795735945
2.7065358307986096
2.7065611721646903
2.7065864043817744
2.706611528153696
2.7066365441782487
2.7066614531472513
2.706686255746612
2.70671095265639
2.7067355445508596
2.7067600320985705
2.7067844159624084
2.706808696799655
2.706832875262047
2.7068569519958356
2.7068809276418415
2.7069048028355147
2.706928578206989
2.7069522543811373
2.706975831977628
2.7069993116109776
2.7070226938906043
2.7070459794208817
2.707069168801189
2.7070922626259657
2.7071152614847587
2.707138165962275
2.707160976638431
2.7071836940884
2.7072063188826627
2.7072288515870526
2.7072512927628054
2.7072736429666047
2.707295902750628
2.707318072662592
2.707340153245798
2.707362145039177
2.7073840485773317
2.707405864390581
2.707427593005003
2.707449234942477
2.707470790720725
2.7074922608533547
2.707513645849897
2.70753494621585
2.7075561624527156
2.707577295058042
2.7075983445254606
2.707619311344724
2.7076401960017464
2.707660998978639
2.707681720753748
2.7077023618016907
2.7077229225933928
2.7077434035961234
2.7077638052735304
2.7077841280856765
2.707804372489072
2.707824538936711
2.7078446278781034
2.7078646397593107
2.707884575022976
2.7079044341083587
2.7079242174513665
2.707943925484587
2.7079635586373194
2.7079831173356057
2.7080026020022614
2.708022013056906
2.7080413509159933
2.708060615992841
2.70807980869766
2.708098929437585
2.7081179786167007
2.7081369566360727
2.7081558638937744
2.7081747007849146
2.7081934677016664
2.708212165033293
2.7082307931661758
2.70824935248384
2.708267843366981
2.708286266193492
2.708304621338488
2.7083229091743313
2.7083411300706586
2.7083592843944033
2.7083773725098226
2.7083953947785195
2.7084133515594693
2.7084312432090414
2.7084490700810244
2.7084668325266485
2.708484530894609
2.708502165531089
2.708519736779782
2.7085372449819145
2.708554690476267
2.708572073599198
2.7085893946846635
2.7086066540642393
2.7086238520671424
2.708640989020252
2.7086580652481285
2.708675081073037
2.7086920368149654
2.7087089327916445
2.708725769318569
2.7087425467090167
2.7087592652740673
2.7087759253226227
2.708792527161425
2.7088090710950756
2.708825557426055
2.7088419864547397
2.7088583584794206
2.708874673796322
2.7088909326996196
2.7089071354814567
2.7089232824319627
2.7089393738392706
2.708955409989534
2.7089713911669433
2.708987317653744
2.709003189730251
2.709019007674869
2.7090347717641037
2.7090504822725823
2.709066139473067
2.7090817436364714
2.7090972950318766
2.7091127939265456
2.7091282405859403
2.709143635273735
2.7091589782518324
2.7091742697803776
2.709189510117774
2.709204699520697
2.709219838244109
2.709234926541272
2.7092499646637647
2.7092649528614943
2.7092798913827103
2.7092947804740195
2.7093096203803984
2.7093244113452077
2.7093391536102045
2.709353847415556
2.7093684929998534
2.709383090600123
2.70939764045184
2.7094121427889424
2.7094265978438408
2.709441005847433
2.7094553670291157
2.7094696816167962
2.709483949836905
2.7094981719144084
2.7095123480728183
2.709526478534206
2.7095405635192122
2.7095546032470605
2.7095685979355664
2.70958254780115
2.7095964530588468
2.709610313922319
2.709624130603866
2.7096379033144364
2.709651632263637
2.709665317659744
2.7096789597097146
2.7096925586191962
2.709706114592538
2.709719627832799
2.7097330985417605
2.7097465269199357
2.7097599131665784
2.7097732574796938
2.7097865600560485
2.7097998210911793
2.709813040779404
2.7098262193138294
2.709839356886362
2.709852453687716
2.7098655099074245
2.709878525733847
2.709891501354179
2.7099044369544605
2.7099173327195865
2.709930188833313
2.7099430054782685
2.7099557828359617
2.709968521086789
2.709981220410045
2.709993880983928
2.7100065029855522
2.710019086590953
2.710031631975096
2.710044139311886
2.7100566087741726
2.710069040533762
2.710081434761421
2.7100937916268872
2.710106111298876
2.7101183939450886
2.7101306397322196
2.7101428488259636
2.7101550213910235
2.7101671575911186
2.7101792575889903
2.710191321546411
2.71020334962419
2.7102153419821815
2.7102272987792912
2.710239220173484
2.7102511063217896
2.710262957380311
2.710274773504231
2.710286554847817
2.7102983015644306
2.710310013806533
2.710321691725691
2.7103333354725843
2.710344945197012
2.7103565210478986
2.7103680631733007
2.710379571720413
2.710391046835575
2.710402488664277
2.710413897351166
2.7104252730400518
2.710436615873914
2.710447925994907
2.7104592035443655
2.710470448662812
2.7104816614899616
2.710492842164727
2.710503990825227
2.7105151076087877
2.7105261926519533
2.710537246090488
2.710548268059383
2.7105592586928617
2.710570218124385
2.710581146486657
2.7105920439116304
2.7106029105305116
2.7106137464737654
2.710624551871122
2.71063532685158
2.710646071543413
2.710656786074175
2.710667470570703
2.710678125159125
2.7106887499648633
2.7106993451126398
2.7107099107264814
2.7107204469297232
2.7107309538450157
2.7107414315943275
2.7107518802989508
2.7107623000795065
2.710772691055948
2.7107830533475665
2.7107933870729957
2.7108036923502152
2.7108139692965563
2.7108242180287054
2.7108344386627095
2.710844631313979
2.7108547960972946
2.7108649331268087
2.7108750425160513
2.710885124377934
2.710895178824755
2.710905205968201
2.710915205919354
2.710925178788693
2.710935124686101
2.7109450437208658
2.7109549360016856
2.710964801636673
2.71097464073336
2.710984453398699
2.710994239739069
2.7110039998602793
2.7110137338675724
2.711023441865628
2.711033123958568
2.711042780249958
2.7110524108428127
2.7110620158395995
2.711071595342241
2.7110811494521196
2.7110906782700814
2.711100181896438
2.711109660430972
2.7111191139729396
2.711128542621074
2.7111379464735883
2.711147325628181
2.7111566801820364
2.711166010231831
2.711175315873734
2.711184597203413
2.711193854316036
2.711203087306274
2.7112122962683065
2.711221481295823
2.7112306424820254
2.7112397799196333
2.7112488937008856
2.7112579839175446
2.7112670506608985
2.711276094021764
2.71128511409049
2.7112941109569615
2.7113030847106
2.711312035440369
2.7113209632347752
2.7113298681818736
2.7113387503692676
2.711347609884114
2.711356446813124
2.711365261242569
2.71137405325828
2.711382822945653
2.711391570389649
2.711400295674801
2.711408998885212
2.7114176801045606
2.7114263394161036
2.7114349769026767
2.7114435926466998
2.7114521867301775
2.7114607592347024
2.7114693102414584
2.711477839831222
2.7114863480843656
2.7114948350808605
2.711503300900278
2.7115117456217934
2.7115201693241873
2.7115285720858484
2.7115369539847762
2.7115453150985838
2.711553655504499
2.711561975279368
2.711570274499657
2.711578553241454
2.711586811580473
2.7115950495920553
2.7116032673511707
2.711611464932421
2.7116196424100423
2.711627799857907
2.711635937349526
2.71164405495805
2.711652152756274
2.7116602308166367
2.711668289211225
2.711676328011775
2.7116843472896734
2.711692347115962
2.7117003275613367
2.7117082886961525
2.7117162305904237
2.7117241533138263
2.7117320569357006
2.7117399415250527
2.711747807150557
2.7117556538805574
2.71176348178307
2.7117712909257845
2.711779081376067
2.711786853200961
2.71179460646719
2.711802341241159
2.7118100575889565
2.7118177555763565
2.7118254352688207
2.7118330967314987
2.7118407400292326
2.7118483652265564
2.711855972387699
2.711863561576586
2.71187113285684
2.711878686291786
2.7118862219444484
2.7118937398775564
2.711901240153544
2.711908722834552
2.711916187982431
2.711923635658741
2.7119310659247544
2.7119384788414576
2.711945874469552
2.7119532528694568
2.7119606141013093
2.7119679582249674
2.7119752853000114
2.7119825953857446
2.711989888541196
2.7119971648251218
2.7120044242960057
2.712011667012062
2.712018893031236
2.712026102411207
2.712033295209388
2.7120404714829283
2.7120476312887156
2.712054774683376
2.712061901723276
2.712069012464525
2.712076106962976
2.7120831852742264
2.7120902474536206
2.712097293556251
2.7121043236369586
2.7121113377503367
2.7121183359507297
2.7121253182922356
2.712132284828708
2.712139235613757
2.71214617070075
2.712153090142814
2.712159993992836
2.712166882303465
2.7121737551271132
2.7121806125159584
2.7121874545219424
2.712194281196776
2.7122010925919366
2.712207888758673
2.7122146697480045
2.712221435610722
2.7122281863973914
2.712234922158352
2.71224164294372
2.7122483488033895
2.712255039787032
2.7122617159441
2.7122683773238254
2.712275023975224
2.7122816559470944
2.7122882732880194
2.7122948760463683
2.7123014642702974
2.7123080380077504
2.7123145973064613
2.712321142213954
2.7123276727775445
2.7123341890443413
2.7123406910612466
2.7123471788749582
2.7123536525319696
2.7123601120785716
2.7123665575608533
2.712372989024704
2.712379406515813
2.7123858100796707
2.7123921997615716
2.712398575606613
2.712404937659697
2.7124112859655316
2.712417620568633
2.7124239415133236
2.7124302488437357
2.712436542603812
2.7124428228373056
2.7124490895877824
2.7124553428986204
2.7124615828130128
2.712467809373967
2.712474022624307
2.712480222606674
2.712486409363527
2.712492582937143
2.712498743369621
2.71250489070288
2.71251102497866
2.7125171462385254
2.712523254523863
2.7125293498758847
2.7125354323356285
2.712541501943959
2.7125475587415675
2.712553602768974
2.7125596340665283
2.7125656526744097
2.712571658632629
2.7125776519810287
2.7125836327592845
2.712589601006905
2.712595556763234
2.7126015000674513
2.7126074309585717
2.712613349475448
2.712619255656771
2.71262514954107
2.712631031166714
2.7126369005719133
2.7126427577947188
2.7126486028730237
2.712654435844564
2.7126602567469202
2.7126660656175168
2.712671862493624
2.7126776474123577
2.7126834204106816
2.7126891815254064
2.7126949307931922
2.7127006682505477
2.7127063939338325
2.712712107879256
2.7127178101228804
2.7127235007006196
2.712729179648241
2.712734847001366
2.7127405027954703
2.712746147065885
2.7127517798477974
2.7127574011762525
2.712763011086152
2.7127686096122554
2.7127741967891827
2.712779772651413
2.712785337233285
2.7127908905690004
2.712796432692621
2.7128019636380722
2.7128074834391422
2.7128129921294835
2.712818489742613
2.7128239763119133
2.712829451870632
2.7128349164518846
2.712840370088653
2.7128458128137876
2.712851244660007
2.7128566656598996
2.7128620758459236
2.7128674752504076
2.712872863905552
2.7128782418434283
>>> def tetration(x):
...     k = x
...     for y in range(1000):
...             k = x**k 
... print(k)
  File "<stdin>", line 5
    print(k)
    ^^^^^
SyntaxError: invalid syntax
>>> def tetration(x):
...     for y in range(1000):
...             k = x**k 
...     print(k)
... 
>>> tetration(1.444667861)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in tetration
UnboundLocalError: local variable 'k' referenced before assignment
>>> def tetration(x):
...     k = x
...     for y in range(1000):
...             k =  x**k
...     print(k)
... 
>>> tetration(1.444667861)
2.7128782251777213
>>> tetration(0.02)
0.03146156083854915
>>> tetration(0.001)
0.001051251058221843
>>> tetration(-1)
-1.0
>>> tetration(-1.5)
(-2.8738910798805294e-05+0.5443578232160838j)
>>> tetration(-2)
(-1.999992150399977+7.497788141830163e-07j)
>>> -2 ** -2
-0.25
>>> tetration(math.i)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'math' has no attribute 'i'. Did you mean: 'pi'?
>>> tetration(math.j)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'math' has no attribute 'j'
>>> tetration(complex(0,1))
(0.4382829367270323+0.3605924718713855j)
>>> z = 2+3j
>>> z * j
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'j' is not defined
>>> z * complex(0, j)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'j' is not defined
>>> z * complex(0, 1)
(-3+2j)
>>> i = j
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'j' is not defined
>>> i = 0 + 1j
>>> z * i
(-3+2j)
>>> tetration(complex(0,1))
(0.4382829367270323+0.3605924718713855j)
>>> tetration(-2)
(-1.999992150399977+7.497788141830163e-07j)
>>> tetration(-1)
-1.0
>>> tetration(-2.5)
(nan+nanj)
>>> tetration(-3)
(0.00019617719748330414+0.0004987817545084941j)
>>> tetration(-e)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'e' is not defined
>>> tetration(-(math.e))
(1.1236241417413428-0.21076801863116967j)
>>> tetration(-(math.e))
(1.1236241417413428-0.21076801863116967j)
>>> tetration
<function tetration at 0x7f9a683af7f0>
>>> import inspect
>>> import mymodule
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'mymodule'
>>> tetration(i)
(0.4382829367270323+0.3605924718713855j)
>>> tetration(base, repetitions):
  File "<stdin>", line 1
    tetration(base, repetitions):
                                ^
SyntaxError: invalid syntax
>>> def tetration(base, repetitions):
...     power = base
...     for x in range(repetitions):
...             power = base ** power
... return power
  File "<stdin>", line 5
    return power
    ^^^^^^
SyntaxError: invalid syntax
>>> def tetration(base, repetitions):
...     power = base
...     for x in range(repetitions):
...             power = base ** power
...     return power
... 
>>> tetration(2, 3)
65536
>>> tetration(i, 2)
(0.9471589980723784+0.32076444997930853j)
>>> def tetration(base, repetitions):
...     power = base
...     for x in range(repetitions - 1):
...             power = base ** power
...     return power
... 
>>> tetration(2, 3)
16
>>> tetration(i, 2)
(0.20787957635076193+0j)
>>> tetration(i, 3)
(0.9471589980723784+0.32076444997930853j)
>>> 
